#----------------------------------------------------------------------------------------------------
# Light Controls
- alias: Living Room Lamp On at Sunset
  # Turns on the living Room Lamp shortly before sunset
  trigger:
  - event: sunset
    offset: -00:30:00
    platform: sun
  action:
  - service: light.turn_on
    entity_id: light.living_room_lamp
- alias: Living Room Lamp Off at Bedtime
  # Lamp turns off at night, but makes sure we're not listening to music or tv first
  trigger:
  - platform: template
    value_template: "{{ states.sensor.time.state == states.input_datetime.lvng_rm_lamp_off_time.state[0:5] }}"
  condition: 
    condition: not
    conditions:
      condition: or
      conditions:
      - condition: state
        entity_id: media_player.living_room
        state: 'playing'
      - condition: state
        entity_id: media_player.spotify_chris_moreno
        state: 'playing'
  action:
  - service: light.turn_off
    entity_id: light.living_room_lamp 
  - service: media_player.turn_off
    entity_id: media_player.living_room_tv
- alias: Living Room Lamp Off Night After Media Off
  # Lamp turns off a bit after turning off sonos/tv if it's after sunset 
  trigger:
  - platform: state
    entity_id: media_player.living_room
    from: 'playing'
    to: 'paused'
    for: "00:15:00"
  - platform: state
    entity_id: media_player.living_room
    from: 'playing'
    to: 'idle'
    for: "00:15:00"
  condition: 
  - condition: sun
    after: sunset
  - condition: state
    entity_id: light.living_room_lamp
    state: 'on'
  action:
  - service: light.turn_off
    entity_id: light.living_room_lamp  
  - service: media_player.turn_off
    entity_id: media_player.living_room_tv 
- alias: Porch Lights On at Sunset
  # Porch lights come on shortly before sunset
  trigger:
  - event: sunset
    offset: -00:15:00
    platform: sun
  action:
  - service: switch.turn_on
    entity_id: switch.porch_lights   
- alias: Porch Lights Off at Sunrise
  # Porch lights turn off at sunrise
  trigger:
  - event: sunrise
    platform: sun
  action:
  - service: switch.turn_off
    entity_id: switch.porch_lights   
- alias: Patio Lights Turn On When Back Door Opens
  # Turns on patio lights when back door opens at night
  trigger:
  - entity_id: binary_sensor.back_door
    from: 'off'
    platform: state
    to: 'on'
  condition:
  - condition: state
    entity_id: light.patio_lights
    state: 'off'
  - after: sunset
    condition: sun
  action:
  - service: light.turn_on
    entity_id: light.patio_lights  
#----------------------------------------------------------------------------------------------------
# Alarm Notifications
- alias: Actionable Notification Alarm Arm 
  # After media off and alarm didn't auto-arm, because staying up late, send actionable notification
  trigger:
  - platform: state
    entity_id: media_player.living_room
    from: 'playing'
    to: 'paused'
  - platform: state
    entity_id: media_player.living_room
    from: 'playing'
    to: 'idle'
  - platform: state
    entity_id: media_player.spotify_chris_moreno
    from: 'playing'
    to: 'paused'
  - platform: state
    entity_id: media_player.spotify_chris_moreno
    from: 'playing'
    to: 'idle'
  condition: 
  - condition: template
    value_template: "{{ states.sensor.time.state > states.input_datetime.lvng_rm_lamp_off_time.state[0:5] }}" 
  - condition: state
    entity_id: input_boolean.arm_alarm
    state: 'off'
  action:
    service: notify.notify_all_phones
    data:
      title: "Arm Alarm Now?"
      message: "Swipe Left->View (lockscreen) or Down (popup)"
      data:
        push:
          category: "alarm" # Needs to match the top level identifier used in the ios configuration
- alias: Door Open Alarm Utility
  # Door Open Alert Alarm/Critical Notification
  trigger:
  - platform: state
    entity_id: group.doors
    from: 'off'
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.arm_alarm
    state: 'on'
  action:
  - service: script.turn_on
    entity_id: script.phone_critical_alert
    data:
      variables:
        message: >
          {% if is_state('binary_sensor.utility_room_door', 'on') %}
            Utility Room Door Open
          {% elif is_state('binary_sensor.front_door', 'on') %}
            Front Door Open
          {% elif is_state('binary_sensor.back_door', 'on') %}
            Back Door Open
          {% elif is_state('binary_sensor.garage_side_door', 'on') %}
            Garage Side Door Open
          {% endif %}
        title: Door Open! 
  - service: scene.turn_on
    entity_id: scene.alarm_alert_scene
  - service: script.turn_on
    entity_id: script.sonos_say_to_all
    data:
      variables: 
        volume: 0.4
    data_template:
      variables:
        message: >
          {% if is_state('binary_sensor.utility_room_door', 'on') %}
            Utility Room Door Open
          {% elif is_state('binary_sensor.front_door', 'on') %}
            Front Door Open
          {% elif is_state('binary_sensor.back_door', 'on') %}
            Back Door Open
          {% elif is_state('binary_sensor.garage_side_door', 'on') %}
            Garage Side Door Open
          {% endif %} 
#- alias: Window Open basic Notification
#  # DEACTIVATED: Send phone notification anytime window sensor is tripped (for testing now)
#  trigger:
#  - platform: state
#    entity_id: group.windows
#    from: 'off'
#    to: 'on'
#  condition:
#  - condition: state
#    entity_id: input_boolean.bypass_workout_room
#    state: 'off'
#  action:
#  - service: script.turn_on
#    entity_id: script.phone_notification
#    data:
#      variables:
#        message: >
#          {% if is_state('binary_sensor.lumi_lumi_vibration_aq1_33a49d03_ias_zone', 'on') %}
#            Workout Room Window Sensor 
#          {% elif is_state('binary_sensor.lumi_lumi_vibration_aq1_8e959d03_ias_zone', 'on') %}
#            Guest Room Window Sensor
#          {% endif %}
#        title: Window Sensor Tripped 
#----------------------------------------------------------------------------------------------------
# Alarm Arm/Disarm Controls
- alias: Arm Alarm from Notification
  # Actionable Notification Alarm Arm sends event that triggers this automation
  trigger:
    platform: event
    event_type: ios.notification_action_fired
    event_data:
      actionName: ARM_ALARM
  action:
  - data: {}
    entity_id: input_boolean.arm_alarm
    service: input_boolean.turn_on
- alias: Arm Alarm at Night
  # Arm alarm at time set in UI, only fires if Living Room Lamp is off and Chris Spotify is not Playing at home
  trigger:
  - platform: template
    value_template: "{{ states.sensor.time.state == states.input_datetime.alarm_auto_arm_time.state[0:5] }}"
  condition:
  - condition: state
    entity_id: input_boolean.arm_alarm
    state: 'off'
  - condition: state
    entity_id: light.living_room_lamp
    state: 'off'
  - condition: and
    conditions:
      - condition: not
        conditions:
          - condition: state
            entity_id:  device_tracker.phone
            state: 'away'
      - condition: not
        conditions:
          - condition: state
            entity_id: media_player.spotify_chris_moreno
            state: 'playing'
  action:
  - data: {}
    entity_id: input_boolean.arm_alarm
    service: input_boolean.turn_on
- alias: Disarm Alarm in Morning
  # Disarms alarm in the morning at time set in UI and reset Media Player volumes
  trigger:
  - platform: template
    value_template: "{{ states.sensor.time.state == states.input_datetime.alarm_auto_disarm_time.state[0:5] }}"
  condition: 
  action:
  - data: {}
    entity_id: input_boolean.arm_alarm
    service: input_boolean.turn_off
  - service: media_player.volume_set
    data:
      entity_id: media_player.living_room
      volume_level: 0.27
  - service: media_player.volume_set
    data:
      entity_id: media_player.kitchen
      volume_level: 0.23
- alias: Arm Alarm and Set TStat When Gone
  # Arm alarm and set TStat to away when we're both away from home
  trigger:
  - entity_id: group.peopleanyonehome
    from: home
    platform: state
    to: not_home
  condition: []
  action:
  - data: {}
    entity_id: input_boolean.arm_alarm
    service: input_boolean.turn_on
  - data:
      preset_mode: away
    entity_id: climate.thermostat_2
    service: climate.set_preset_mode
- alias: Disarm Alarm Set TStat When Anyone Returns
  # Disarms alarm, runs TStat schedule when someone/anyone/all come home
  trigger:
  - entity_id: group.peopleanyonehome
    from: not_home
    platform: state
    to: home
    # Note the above group changes to home when either or both are home
  condition:
  - condition: state
    entity_id: input_boolean.arm_alarm
    state: 'on'
  action:
  - entity_id: input_boolean.arm_alarm
    service: input_boolean.turn_off
  - data:
      preset_mode: none
    entity_id: climate.thermostat_2
    service: climate.set_preset_mode
- alias: Arm Alarm with Noisemaker
  # Arm alarm when noisemaker plug is switched on (backup in case it didn't auto arm)
  trigger:
  - entity_id: switch.noisemaker_plug
    from: 'off'
    platform: state
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.arm_alarm
    state: 'off'
  action:
  - entity_id: input_boolean.arm_alarm
    service: input_boolean.turn_on
- alias: Disarm Alarm When Front Door Unlocked
  # Disarm alarm if front door is unlocked 
  trigger:
  - entity_id: lock.front_door_lock
    from: locked
    platform: state
    to: unlocked
  condition:
  - condition: state
    entity_id: input_boolean.arm_alarm
    state: 'on'
  action:
  - entity_id: input_boolean.arm_alarm
    service: input_boolean.turn_off
  - data:
      variables:
        message: Alarm is disarmed. Have a great day!
        sonos_entity: media_player.office
        volume: 0.3
    entity_id: script.sonos_say
    service: script.turn_on
  - data:
      variables:
        message: Front Door Unlocked
        title: Alarm Disarmed
    entity_id: script.phone_notification
    service: script.turn_on
- alias: Arm Alarm When Front Door Locked
  # Arms alarm when front door locked and noisemaker is on, or all humans are away
  trigger:
  - entity_id: lock.front_door_lock
    from: unlocked
    platform: state
    to: locked
  condition:
  - condition: state
    entity_id: input_boolean.arm_alarm
    state: 'off'
  - condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.arm_alarm
      state: 'off'
    - condition: or
      conditions:
      - condition: state
        entity_id: switch.noisemaker_plug
        state: 'on'
      - condition: state
        entity_id: group.peopleanyonehome
        state: not_home
  action:
  - entity_id: input_boolean.arm_alarm
    service: input_boolean.turn_on
- alias: Disarm Alarm When Second Person Returns Late
  # Disarms alarm when one of us comes home after already armed
  trigger:
  - entity_id: group.peopleanyoneaway
    from: not_home
    platform: state
    to: home
  condition:
  - condition: state
    entity_id: input_boolean.arm_alarm
    state: 'on'
  action:
  - entity_id: input_boolean.arm_alarm
    service: input_boolean.turn_off
#----------------------------------------------------------------------------------------------------
# Various Comfort and Maintenance Controls

- alias: Turn TV On and Set Input
  # Turn TV on and set input when music starts playing in living room
  trigger:
  - platform: state
    entity_id: media_player.living_room
    from: 'paused'
    to: 'playing'
  - platform: state
    entity_id: media_player.living_room
    from: 'idle'
    to: 'playing'
  condition: 
  - condition: and
    conditions:
    - condition: state
      entity_id: media_player.living_room_tv
      state: 'off'
    - "{{ state_attr('media_player.living_room', 'source') != 'TV'}}"
  action:
  - service: media_player.turn_on
    entity_id: media_player.living_room_tv
  - service: media_player.select_source
    data:
      entity_id: media_player.living_room_tv
      source: 'HDMI 3'

# Hue Remote Automation ----------------
- alias: Hue Remote On Button Single Click
  trigger:
  - device_id: fe8da2da4bc1f5dd21f8f4aca5373cbc
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: turn_on
  action:
  - data: {}
    entity_id: input_boolean.arm_alarm
    service: input_boolean.turn_on
  - data:
      variables:
        message: Alarm is armed
        sonos_entity: media_player.living_room
        volume: 0.4
    entity_id: script.sonos_say
    service: script.turn_on

- alias: Hue Remote On Button Double Click
  trigger:
  - device_id: fe8da2da4bc1f5dd21f8f4aca5373cbc
    domain: zha
    platform: device
    type: remote_button_double_press
    subtype: turn_on
  action:
  - data: {}
    entity_id: input_boolean.arm_alarm
    service: input_boolean.turn_off
  - data:
      variables:
        message: Alarm is disarmed
        sonos_entity: media_player.living_room
        volume: 0.4
    entity_id: script.sonos_say
    service: script.turn_on

- alias: Hue Remote Off Button Single Click
  trigger:
  - device_id: fe8da2da4bc1f5dd21f8f4aca5373cbc
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: turn_off
  action:
  - service: scene.turn_on
    entity_id: scene.all_indoor_lights_off

- alias: Hue Remote Dim Up Button Single Click
  trigger:
  - device_id: fe8da2da4bc1f5dd21f8f4aca5373cbc
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: dim_up 
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: media_player.office
        state: playing
      sequence:
      - service: scene.turn_on
        entity_id: scene.cooking_scene
      - service: sonos.join
        data:
          master: media_player.kitchen
          entity_id: 
          - media_player.living_room
          - media_player.kitchen
          - media_player.office
      - service: sonos.unjoin
        data:
          entity_id: media_player.office   
    default:
    - service: scene.turn_on
      entity_id: scene.cooking_scene
    - service: sonos.join
      data:
        master: media_player.living_room
        entity_id: 
        - media_player.living_room
        - media_player.kitchen
    - service: sonos.unjoin
      data:
        entity_id: 
        - media_player.bathroom
        - media_player.bedroom
        - media_player.office
    

- alias: Hue Remote Dim Up Button Double click
  trigger:
  - device_id: fe8da2da4bc1f5dd21f8f4aca5373cbc
    domain: zha
    platform: device
    type: remote_button_double_press
    subtype: dim_up
  action:
  - service: scene.turn_on
    entity_id: scene.tv_viewing_scene
  - service: sonos.unjoin
    data:
      entity_id: 
      - media_player.kitchen
      - media_player.bathroom
      - media_player.bedroom
      - media_player.office

- alias: Hue Remote Dim Up Button Triple click
  trigger:
  - device_id: fe8da2da4bc1f5dd21f8f4aca5373cbc
    domain: zha
    platform: device
    type: remote_button_triple_press
    subtype: dim_up
  action:
  - service: scene.turn_on
    entity_id: scene.dinner_scene

- alias: Hue Remote Dim Up Button Quadruple click
  trigger:
  - device_id: fe8da2da4bc1f5dd21f8f4aca5373cbc
    domain: zha
    platform: device
    type: remote_button_quadruple_press
    subtype: dim_up
  action:
  - service: scene.turn_on
    entity_id: scene.cleaning_scene
  - service: sonos.join
    data:
      master: media_player.living_room
      entity_id: 
      - media_player.living_room
      - media_player.kitchen
      - media_player.bathroom
      - media_player.bedroom
      - media_player.office
  
- alias: Hue Remote Dim Down Button Single Click
  trigger:
  - device_id: fe8da2da4bc1f5dd21f8f4aca5373cbc
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: dim_down
  action:
  - data:
      variables:
        message: Test
        sonos_entity: media_player.living_room
        volume: 0.3
    entity_id: script.sonos_say
    service: script.turn_on
# End Hue remote automation --------------

- alias: Noisemaker Turn Off
  # Noisemaker turns off at time set in UI (Also setup Sonos for morning speaker setup)
  trigger:
  - platform: template
    value_template: "{{ states.sensor.time.state == states.input_datetime.noisemaker_off_time.state[0:5] }}"
  condition:
  - condition: time
    weekday:
    - mon
    - tue
    - wed
    - thu
    - fri
  action:
  - entity_id: switch.noisemaker_plug
    service: switch.turn_off
  - service: sonos.join
    data:
      master: media_player.kitchen
      entity_id: 
      - media_player.office
      - media_player.kitchen
#- alias: Noisemaker Turn On
#  Needs work, doesn't activate soon enough. Noisemaker turns on once TV is off in bedroom
#  trigger:
#  - platform: state
#    entity_id: media_player.bedroom
#    from: 'playing'
#    to: 'paused'
#    for: "00:02:00"
#  - platform: state
#    entity_id: media_player.bedroom
#    from: 'playing'
#    to: 'idle'
#    for: "00:02:00"
#  condition: 
#  - condition: time
#    after: '21:00:00'
#  action:
#  - entity_id: switch.noisemaker_plug
#    service: switch.turn_on
- alias: Camera Toggle With Alarm
#Toggles indoor cameras on-off in sync with Alarm Arm Switch
  trigger:
  - platform: state
    entity_id: input_boolean.arm_alarm
    from: 'off'
    to: 'on'
  - platform: state
    entity_id: input_boolean.arm_alarm
    from: 'on'
    to: 'off'
  action:
    service_template: >
      {% if trigger.to_state.state == "on" %}
      switch.turn_on
      {% elif trigger.to_state.state == "off" %}
      switch.turn_off
      {% endif %}
    data_template: 
      entity_id: switch.camera_plug   
- alias: Thermostat Sleep with Alarm Arm
#Sets Thermostat preset = "Sleep" when alarm is armed at night and all are home
  trigger:
  - entity_id: input_boolean.arm_alarm
    from: 'off'
    platform: state
    to: 'on'
  condition:
  - condition: and
    conditions:
    - condition: state
      entity_id: group.peopleanyoneaway
      state: home
    - condition: sun
      after: sunset
  action:
  - data:
      preset_mode: sleep
    entity_id: climate.thermostat_2
    service: climate.set_preset_mode
#----------------------------------------------------------------------------------------------------
# UI automation
- alias: Conditional Card Time-Based Toggle
  # Every minute, toggles input boolean to filtering cards in Lovelace while media playing (visualization)
  trigger:
  - platform: time_pattern
    minutes: "/5"
  action:
  - service: input_boolean.toggle
    entity_id: input_boolean.conditional_card_toggle  
  